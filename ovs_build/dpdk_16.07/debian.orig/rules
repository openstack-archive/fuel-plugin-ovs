#!/usr/bin/make -f
# See debhelper(7) (uncomment to enable)
# output every command that modifies files on the build system.
#export DH_VERBOSE = 1

# see EXAMPLES in dpkg-buildflags(1) and read /usr/share/dpkg/*
DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/default.mk

DEB_HOST_GNU_CPU := $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)

# see FEATURE AREAS in dpkg-buildflags(1)
export DEB_BUILD_MAINT_OPTIONS = hardening=+all

# build with debug symbols, dh_strip will create -dgbsyms packages by that
export EXTRA_CFLAGS = -g -march=corei7-avx -mno-movbe -mno-abm -mno-fma -mno-bmi -mno-bmi2 -mno-avx2 -mno-lzcnt -mtune=corei7-avx

# see ENVIRONMENT in dpkg-buildflags(1)
# package maintainers to append CFLAGS
#export DEB_CFLAGS_MAINT_APPEND  = -Wall -pedantic
# package maintainers to append LDFLAGS
#export DEB_LDFLAGS_MAINT_APPEND = -Wl,--as-needed

DPDK_CONFIG  = "$(DEB_HOST_GNU_CPU)-native-linuxapp-gcc"
DPDK_STATIC_DIR = "debian/build/static-root"
DPDK_SHARED_DIR = "debian/build/shared-root"

clean:
	dh_testdir
	rm -rf debian/build debian/tmp
	dh_clean

build-config:
	dh_testdir
	sed -i '/RTE_MACHINE_CPUFLAG_AVX2/,+13 s/^/#/' lib/librte_acl/Makefile
	sed -i '/__AVX2__/,+2 s/^/#/' mk/rte.cpuflags.mk
	$(MAKE) O=$(DPDK_STATIC_DIR) T=$(DPDK_CONFIG) config
	sed -ri 's,(RTE_MACHINE=).*,\1default,' \
	        $(DPDK_STATIC_DIR)/.config

build-indep: build-config
	dh_testdir
	$(MAKE) O=$(DPDK_STATIC_DIR) doc-api-html doc-guides-html

build-arch: build-config
	dh_testdir
	echo "CPUFLAGS_LIST := -DRTE_COMPILE_TIME_CPUFLAGS=" > mk/rte.cpuflags.mk
	$(MAKE) O=$(DPDK_STATIC_DIR) build
	# Unfortunately the decision about having static or shared libraries is
	# made for the whole build, which then produces only .a or .so files
	# (but not both).
	# And the target layout for target selection has no field for the
	# type of library.
	# Right now I hack this by doing a second build which only differs in
	# the selection of shared libs.
	# Shared libs should be default, so the previous static build is only
	# used to get static libraries.
	cp -a $(DPDK_STATIC_DIR) $(DPDK_SHARED_DIR)
	sed -ri 's,(RTE_BUILD_SHARED_LIB=).*,\1y,' \
	        $(DPDK_SHARED_DIR)/.config
	$(MAKE) O=$(DPDK_SHARED_DIR) build

build: build-arch build-indep

binary-indep: PACKAGE_NAME=dpdk-doc
binary-indep: DOCDIR=usr/share/doc/dpdk
binary-indep: export DH_OPTIONS=--indep
binary-indep:
	dh_testroot
	dh_prep
	dh_testdir
	dh_installdirs
	dh_install
	dh_installdocs
	dh_installchangelogs
	dh_lintian
	# Package: dpdk-doc
	# All files based on the install-doc rule (includes examples)
	$(MAKE) O=$(DPDK_SHARED_DIR) prefix=/usr \
		DESTDIR=debian/dpdk-doc install-doc
	dh_link
	dh_compress
	dh_fixperms
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary-arch: LIBDIR=usr/lib/$(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
binary-arch: export DH_OPTIONS=--arch
binary-arch:
	dh_testroot
	dh_prep
	dh_testdir
	dh_installdirs
	dh_install
	dh_installdocs
	dh_installchangelogs
	dh_lintian
	dh_systemd_enable
	dh_installinit --no-start --no-restart-on-upgrade
	dh_systemd_start --no-start --no-restart-on-upgrade
	# Package: dpdk (runtime)
	$(MAKE) O=$(DPDK_STATIC_DIR) prefix=/usr \
		DESTDIR=debian/dpdk install-runtime
	$(MAKE) O=$(DPDK_SHARED_DIR) prefix=/usr \
		DESTDIR=debian/dpdk install-runtime
	cp debian/dpdk.interfaces debian/dpdk/etc/dpdk/interfaces
	#rm debian/dpdk/usr/sbin/dpdk_nic_bind
	ln -s /usr/share/dpdk/tools/dpdk_nic_bind.py \
		debian/dpdk/sbin/dpdk_nic_bind
	# Package: libdpdk0 (bare runtime libs)
	mkdir -p debian/libdpdk0/$(LIBDIR)
	# NOTE so far upstream dpdk has not settled on really versioning the
	# combined lib. There are discussions ongoing and various alternative
	# approaches.
	# We have to wait until that is clarified upstream (in a follow on dpdk
	# version).
	# One likely solution will make us ship the non combined .so and a
	# linker script which replaces the combined lib.
	# To easen package management a few notes how this will change if that
	# happens:
	# NOTE: linker script - this becomes a nop (linker skript has no sover
	# on its own)
	rm debian/dpdk/usr/lib/libdpdk.so
	cp -a $(DPDK_SHARED_DIR)/lib/* debian/libdpdk0/$(LIBDIR)/
	# NOTE: linker script - insert basenames loop for all .so's
	# NOTE: linker script - we also will need multiple symbol files then
	# Package: dpdk-dev (build environment)
	$(MAKE) O=$(DPDK_SHARED_DIR) prefix=/usr \
		DESTDIR=debian/dpdk-dev install-sdk
	cp $(DPDK_SHARED_DIR)/.config debian/dpdk-dev/usr/share/dpdk/config
	# Package: libdpdk-dev (bare headers and static devel libs)
	mkdir -p debian/libdpdk-dev/usr/lib/
	# NOTE: linker script - insert basenames loop for all .a's
	#ln -s /$(LIBDIR)/libdpdk.so \
	#    debian/libdpdk-dev/$(LIBDIR)/libdpdk.so.0
	cp -a $(DPDK_STATIC_DIR)/lib/* debian/libdpdk-dev/usr/lib/
	mv debian/dpdk-dev/usr/include/dpdk debian/libdpdk-dev/usr/include/
	# NOTE: linker script - package instead of removing all sublibs
	rm -rf debian/dpdk/usr/lib*
	dh_python2
	dh_perl
	dh_link
	dh_compress
	dh_fixperms
	dh_strip
	dh_makeshlibs
	dh_shlibdeps
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-arch binary-indep
